#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "c5.y"

    /* Copyright (C) 1989,1990 James A. Roskind, All rights reserved.
    This grammar was developed  and  written  by  James  A.  Roskind.
    Copying  of  this  grammar  description, as a whole, is permitted
    providing this notice is intact and applicable  in  all  complete
    copies.   Translations as a whole to other parser generator input
    languages  (or  grammar  description  languages)   is   permitted
    provided  that  this  notice is intact and applicable in all such
    copies,  along  with  a  disclaimer  that  the  contents  are   a
    translation.   The reproduction of derived text, such as modified
    versions of this grammar, or the output of parser generators,  is
    permitted,  provided  the  resulting  work includes the copyright
    notice "Portions Copyright (c)  1989,  1990  James  A.  Roskind".
    Derived products, such as compilers, translators, browsers, etc.,
    that  use  this  grammar,  must also provide the notice "Portions
    Copyright  (c)  1989,  1990  James  A.  Roskind"  in   a   manner
    appropriate  to  the  utility,  and in keeping with copyright law
    (e.g.: EITHER displayed when first invoked/executed; OR displayed
    continuously on display terminal; OR via placement in the  object
    code  in  form  readable in a printout, with or near the title of
    the work, or at the end of the file).  No royalties, licenses  or
    commissions  of  any  kind are required to copy this grammar, its
    translations, or derivative products, when the copies are made in
    compliance with this notice. Persons or corporations that do make
    copies in compliance with this notice may charge  whatever  price
    is  agreeable  to  a  buyer, for such copies or derivative works.
    THIS GRAMMAR IS PROVIDED ``AS IS'' AND  WITHOUT  ANY  EXPRESS  OR
    IMPLIED  WARRANTIES,  INCLUDING,  WITHOUT LIMITATION, THE IMPLIED
    WARRANTIES  OF  MERCHANTABILITY  AND  FITNESS  FOR  A  PARTICULAR
    PURPOSE.

    James A. Roskind
    Independent Consultant
    516 Latania Palm Drive
    Indialantic FL, 32903
    (407)729-4348
    jar@ileaf.com


    ---end of copyright notice---


This file is a companion file to a C++ grammar description file.

*/


/* FILENAME: C.Y */

/*  This  is a grammar file for the dpANSI C language.  This file was
last modified by J. Roskind on 3/7/90. Version 1.00 */




/* ACKNOWLEDGMENT:

Without the effort expended by the ANSI C standardizing committee,  I
would  have been lost.  Although the ANSI C standard does not include
a fully disambiguated syntax description, the committee has at  least
provided most of the disambiguating rules in narratives.

Several  reviewers  have also recently critiqued this grammar, and/or
assisted in discussions during it's preparation.  These reviewers are
certainly not responsible for the errors I have committed  here,  but
they  are responsible for allowing me to provide fewer errors.  These
colleagues include: Bruce Blodgett, and Mark Langley. */


#define YYDEBUG_LEXER_TEXT (yylval) /* our lexer loads this up each time */
#define YYDEBUG 1        /* get the pretty debugging code to compile*/
#define YYSTYPE  char *  /* interface with flex: should be in header file */


#line 81 "y.tab.c"
#define AUTO 257
#define DOUBLE 258
#define INT 259
#define STRUCT 260
#define BREAK 261
#define ELSE 262
#define LONG 263
#define SWITCH 264
#define CASE 265
#define ENUM 266
#define REGISTER 267
#define TYPEDEF 268
#define CHAR 269
#define EXTERN 270
#define RETURN 271
#define UNION 272
#define CONST 273
#define FLOAT 274
#define SHORT 275
#define UNSIGNED 276
#define CONTINUE 277
#define FOR 278
#define SIGNED 279
#define VOID 280
#define DEFAULT 281
#define GOTO 282
#define SIZEOF 283
#define VOLATILE 284
#define DO 285
#define IF 286
#define STATIC 287
#define WHILE 288
#define IDENTIFIER 289
#define STRINGliteral 290
#define FLOATINGconstant 291
#define INTEGERconstant 292
#define CHARACTERconstant 293
#define OCTALconstant 294
#define HEXconstant 295
#define TYPEDEFname 296
#define ARROW 297
#define ICR 298
#define DECR 299
#define LS 300
#define RS 301
#define LE 302
#define GE 303
#define EQ 304
#define NE 305
#define ANDAND 306
#define OROR 307
#define ELLIPSIS 308
#define MULTassign 309
#define DIVassign 310
#define MODassign 311
#define PLUSassign 312
#define MINUSassign 313
#define LSassign 314
#define RSassign 315
#define ANDassign 316
#define ERassign 317
#define ORassign 318
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    1,    1,    1,    1,    1,    2,    2,    3,    3,    3,
    3,    5,    5,    5,    5,    7,    5,    9,    5,    5,
    5,    8,    8,    6,    6,   11,   11,   11,   11,   11,
   11,   12,   12,   12,   12,   12,   12,   13,   13,   15,
   15,   15,   15,   16,   16,   16,   17,   17,   17,   18,
   18,   18,   18,   18,   19,   19,   19,   20,   20,   21,
   21,   22,   22,   23,   23,   24,   24,   25,   25,   10,
   10,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,    4,    4,   27,   28,   28,   29,   29,   29,
   29,   37,   33,   39,   33,   40,   33,   43,   32,   45,
   32,   46,   32,   41,   41,   41,   44,   44,   44,   34,
   34,   34,   38,   38,   52,   52,   53,   53,   47,   47,
   47,   47,   49,   49,   49,   49,   30,   30,   30,   31,
   31,   31,   48,   48,   48,   50,   50,   50,   51,   51,
   51,   51,   51,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   55,   55,   56,   56,   56,   58,   58,   59,
   59,   61,   61,   63,   63,   62,   62,   65,   65,   68,
   64,   64,   66,   66,   67,   57,   57,   57,   69,   69,
   70,   70,   71,   71,   72,   72,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   76,   76,   60,   60,   14,   14,   14,   14,   36,   36,
   77,   77,   77,   78,   78,   79,   79,   79,   79,   79,
   79,   80,   80,   80,   87,   81,   86,   86,   86,   86,
   88,   88,   89,   89,   82,   83,   83,   90,   83,   91,
   84,   92,   84,   93,   84,   85,   85,   85,   85,    0,
    0,   94,   94,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   42,   42,
   97,   97,   75,   75,   75,  100,  100,  100,  101,  101,
   98,   98,   98,   98,   98,  102,  102,  102,  103,  103,
   35,   35,  104,  104,  104,  106,  106,  106,  105,  105,
   96,   96,   96,  107,  107,  107,   74,   74,   74,   99,
   99,   99,  110,  110,  110,  108,  108,  108,  108,  109,
  109,  109,  109,
};
short yylen[] = {                                         2,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    3,    1,    4,    3,    4,    0,    4,    0,    4,    2,
    2,    1,    1,    1,    3,    1,    2,    2,    2,    2,
    4,    1,    1,    1,    1,    1,    1,    1,    4,    1,
    3,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    3,    3,    1,    3,    3,    1,    3,    1,
    3,    1,    3,    1,    3,    1,    3,    1,    5,    1,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    1,    0,    1,    2,    2,    2,
    2,    0,    4,    0,    4,    0,    5,    0,    4,    0,
    4,    0,    5,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    2,    1,    1,    1,    1,    2,    2,
    2,    2,    1,    2,    2,    2,    2,    2,    2,    1,
    2,    2,    2,    2,    2,    1,    2,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    4,    5,    2,    1,    1,    1,
    2,    2,    2,    2,    3,    2,    3,    2,    1,    0,
    3,    1,    0,    1,    2,    4,    5,    2,    2,    4,
    0,    2,    1,    3,    1,    3,    1,    2,    2,    2,
    1,    2,    2,    1,    2,    2,    2,    1,    2,    2,
    1,    3,    1,    1,    1,    2,    1,    2,    0,    2,
    3,    4,    1,    1,    3,    1,    1,    1,    1,    1,
    1,    3,    4,    3,    0,    2,    2,    3,    3,    4,
    1,    2,    1,    2,    2,    5,    7,    0,    6,    0,
    6,    0,    8,    0,   10,    3,    2,    2,    3,    1,
    2,    1,    1,    2,    3,    3,    3,    3,    2,    3,
    3,    3,    3,    3,    4,    4,    4,    4,    1,    1,
    1,    1,    1,    2,    1,    1,    2,    3,    3,    4,
    1,    4,    5,    2,    3,    3,    4,    4,    1,    3,
    1,    1,    1,    2,    3,    2,    3,    4,    1,    3,
    1,    2,    3,    4,    3,    4,    1,    1,    1,    1,
    2,    3,    2,    3,    4,    1,    2,    2,    3,    3,
    3,    3,    4,
};
short yydefred[] = {                                      0,
  142,  149,  144,  158,  147,    0,  143,  139,  145,  140,
  159,  117,  148,  146,  151,  150,  152,  118,  141,  299,
  136,    0,    0,    0,  253,    0,    0,    0,    0,    0,
  225,    0,    0,    0,    0,    0,    0,    0,  110,  113,
  123,  130,  153,  154,    0,  250,  252,    0,  291,    0,
  293,  301,  203,  204,    0,    0,    0,    0,    0,  294,
    0,  302,  251,   88,  115,  129,  116,   89,  128,  132,
    0,   90,    0,   91,  134,    0,  112,  119,  127,    0,
  254,    0,  137,    0,  111,  114,  124,  131,    0,    0,
    0,    0,    0,   98,  272,    0,  270,  271,  275,  276,
  281,    0,  100,    0,  121,  122,  135,  120,  125,  126,
  133,  138,    0,    0,  231,    0,    0,    0,    0,  259,
    0,    0,    0,  296,    0,    0,    0,    0,    0,    0,
  300,  295,  303,    0,    0,  269,  102,    0,    0,    0,
   96,    0,  257,  262,    0,    0,  226,    0,  258,  263,
    0,    0,  274,  289,    0,    0,    0,    0,    0,    0,
  277,  284,  255,    0,  260,    0,  256,    0,  261,    0,
    0,    0,    0,    0,    0,    0,  160,    0,    0,    0,
   92,   94,  232,  264,  201,  311,    0,    0,    0,    0,
    0,    0,    0,    0,  185,    0,    0,    8,    6,    2,
    1,    5,    3,    4,    0,    0,    0,  313,   32,   33,
   34,   35,   36,   37,    9,    0,   12,    0,   38,    0,
   40,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   85,    0,    0,    0,  179,    0,  176,    0,  306,
  298,    0,    0,    0,    0,    0,    0,    0,    0,   93,
  267,    0,  238,    0,    0,    0,  244,    0,    0,  242,
    0,  240,    0,    0,  227,    0,   83,    0,   70,    0,
    0,  233,  216,  217,  218,  219,  220,  221,    0,    0,
   95,  268,    0,    0,    0,    0,    0,    0,  278,  285,
   99,  265,  101,  266,    0,  170,  164,  172,    0,  166,
  169,  155,  161,    0,  162,    0,  163,    0,    0,    0,
  193,  192,  309,  307,  308,  200,  199,    0,    0,  189,
  188,  190,  196,  195,  197,  312,    0,  304,    0,    0,
   30,    0,   27,   28,    0,    0,    0,    0,    7,   20,
   21,    0,    0,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  314,    0,  182,    0,  177,
    0,  103,   97,    0,  213,  210,  248,    0,    0,    0,
  247,    0,    0,    0,    0,    0,    0,    0,   73,   74,
   75,   76,   77,   78,   79,   80,   81,   82,   72,    0,
  235,    0,  228,    0,  229,  234,  290,  288,  280,  287,
  282,    0,  175,    0,  168,  174,  167,  165,  156,    0,
    0,    0,    0,  318,    0,  184,  186,  202,    0,   11,
    0,    0,    0,  208,  206,   14,    0,   24,    0,    0,
    0,   41,   42,   43,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  315,  180,  214,    0,    0,    0,  249,    0,  224,  246,
    0,    0,    0,   84,   71,  222,  230,  283,  171,  322,
    0,  321,  319,   31,   39,    0,   15,    0,   13,   22,
   23,   17,   19,    0,    0,  211,    0,  223,    0,    0,
    0,    0,  323,   25,   69,  212,  215,    0,    0,    0,
    0,    0,  239,    0,    0,    0,  241,    0,    0,  237,
    0,  243,    0,  245,
};
short yydgoto[] = {                                      24,
  215,  216,  217,  266,  218,  437,  344,  492,  345,  267,
  268,  220,  221,  336,  222,  223,  224,  225,  226,  227,
  228,  229,  230,  231,  269,  400,  233,  270,  115,   26,
   27,   28,   29,  116,   60,  250,  142,  117,  148,  248,
  118,   94,  164,  119,  168,  246,   35,   36,   37,   38,
   39,   77,   40,   41,   42,   43,   44,   45,  176,  271,
  177,  178,  179,  297,  300,  415,  298,  414,  127,  236,
  193,  194,  195,  424,   95,  196,  376,  464,  272,  273,
  274,  275,  276,  277,  278,  147,   82,  121,  280,  378,
  387,  385,  382,   46,   47,   57,   97,  156,  313,   99,
  100,  101,  158,   49,  138,   51,   52,  314,  315,  125,
};
short yysindex[] = {                                   2148,
    0,    0,    0,    0,    0,  -95,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   -1,  946, 2148,    0,  988, 1783,   99,  158, 2195,
    0, 2229,  166,  166, 2836, 1893, 2836, 1893,    0,    0,
    0,    0,    0,    0,  -64,    0,    0, 2781,    0,   18,
    0,    0,    0,    0,   91, -121,  -27,    8,  112,    0,
  946,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  354,    0,   61,    0,    0,    0,    0,    0,    0, 2781,
    0,  -58,    0,    0,    0,    0,    0,    0, 2781,   46,
  396,  264,    0,    0,    0, 2781,    0,    0,    0,    0,
    0,    0,    0, 2781,    0,    0,    0,    0,    0,    0,
    0,    0, 2812,  -54,    0, 2281, 2315,  354,  354,    0,
 2781, 2435,  421,    0,   41,   77,  -10,   91,   46,   46,
    0,    0,    0,  404,  574,    0,    0,   46,   61, 1009,
    0,  115,    0,    0, 2781, 1209,    0,  115,    0,    0,
 2781, 2545,    0,    0,  396,  141,  185,   46,  396,  734,
    0,    0,    0,  115,    0, 2781,    0,  115,    0, 2781,
  -30, 2389,    4, 2564,  -30, 2592,    0,  265,  284, 2812,
    0,    0,    0,    0,    0,    0, 1893, 1893, 2040, 2074,
  376,  376,  193,  211,    0,   69, 1694,    0,    0,    0,
    0,    0,    0,    0, 1708, 1708, 1298,    0,    0,    0,
    0,    0,    0,    0,    0,  -25,    0,   21,    0, 1740,
    0,  532,  302, -223,  117, -107,  238,  233,  205,   45,
  -45,    0,  262, 1740, 1740,    0,   91,    0,    1,    0,
    0,  404,  187,  404, 1339,  115, 1009,  115, 1664,    0,
    0,  334,    0, 1740, 1740,  353,    0,  372,   91,    0,
  402,    0,    0,    0,    0,  399,    0,  455,    0,  392,
  398,    0,    0,    0,    0,    0,    0,    0, 1252, 1598,
    0,    0,  412,   46,   46,  416,  470,  396,    0,    0,
    0,    0,    0,    0, 1740,    0,    0,    0,  400,    0,
    0,    0,    0,    4,    0,  -16,    0, 2662, 1860,   60,
    0,    0,    0,    0,    0,    0,    0, 1954,  138,    0,
    0,    0,    0,    0,    0,    0, 2716,    0,  176, 1298,
    0, 1740,    0,    0,  388,  437, 2358,  480,    0,    0,
    0, 1677, 1740,  423,  191,    0, 1740, 1740, 1740, 1740,
 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
 1740, 1740, 1740, 1740, 1740,    0,  403,    0,   77,    0,
  404,    0,    0, 1664,    0,    0,    0,  477,  471,  436,
    0,  496, 1165,  486, 1165, 1740,  509, 1740,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1740,
    0, 1165,    0, 1634,    0,    0,    0,    0,    0,    0,
    0,  526,    0,  400,    0,    0,    0,    0,    0,  537,
  546,  547,   60,    0,  138,    0,    0,    0,  551,    0,
 1740, 2117,   26,    0,    0,    0,  446,    0,  145,  125,
  125,    0,    0,    0,  532,  532,  302,  302, -223, -223,
 -223, -223,  117,  117, -107,  238,  233,  205,   45,  -22,
    0,    0,    0,   16, 1740, 1165,    0, 1740,    0,    0,
  320,  490, 1740,    0,    0,    0,    0,    0,    0,    0,
   46,    0,    0,    0,    0,   26,    0, 1740,    0,    0,
    0,    0,    0, 1740, 1651,    0,  513,    0,  554,  575,
 1165,  562,    0,    0,    0,    0,    0, 1165, 1740, 1740,
  360, 1165,    0,  571,  563, 1165,    0, 1740,  580,    0,
  593,    0, 1165,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  428,  432,    0,    0,    0,
    0,    0,    0,    0,  216, 1279, 1331, 1614,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  524,    0, 1283,
    0,    0,    0,    0,    0, 1129,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   -4,    0,    0,    0,  524,
    0,    0,    0,  129,    0,    0,    0,    0,  524,  664,
    0,    0,  550,    0,    0,  524,    0,    0,    0,    0,
    0,  550,    0,  524,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2630,    0,    0,    0,    0,    0,    0,
  524,    0,    0,    0, 2470,   31,    0,    0, 2502, 1288,
    0,    0,    0,    0,    0,    0,    0,  958,    0,    0,
    0,  341,    0,    0,  524,  -42,    0,  341,    0,    0,
  524,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  341,    0,  524,    0,  341,    0,  524,
  992,    0,    0, 1721, 1773,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1777, 1972,  587,  594,
  607,  617,    0,  619,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  439,    0,  539,    0,    0,
    0,  636,  608,  888, 1050, 1061, 1259, 1748, 1346,   29,
 1255,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  341,    0,  341,    0,    0,
    0,    0,    0,    0,  610,    0,    0,    0,    0,    0,
    0,    0,  481, 1377,    0,  152,    0,  582,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -42,  -42,
    0,    0,    0, 1379, 1557,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  344,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  618,
    0,    0,    0,    0,    0,    0,    0,    0,  618,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  641,  647,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   31,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -42,    0,  -42,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -42,    0,  -42,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  344,    0,    0,    0,    0,    0,    0,
    0,    0,  642,    0,  642,    0,    0,    0,    0,    0,
    0,    0,  648,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  766,  775,  834,  860,  911,  934,
  962, 1002, 1059, 1087, 1138, 1672, 1978, 1984,   35,    0,
    0,    0,    0,    0,    0,  -42,    0,  610,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  643,    0,    0,    0,    0,  649,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -42,    0,    0,    0,    0,    0,    0,  -42,  610,    0,
 1562,  -42,    0,    0,    0,  -42,    0,  656,    0,    0,
    0,    0,  -42,    0,
};
short yygindex[] = {                                      0,
    0,    0,    0,   85,    0,    0,    0,  268,    0, 1799,
   10,    0,  159,  373,  -48,   30,  300,   65,  358,  365,
  369,  364,  370,    0, -104,    0, -187, -235,  116, -114,
   83,    0,    0,    3,   50,  345,    0,    7,    0,    0,
   13,   73,    0,    5,    0,    0,    0,    0,  803,  971,
 2058,   -3,  -26,  259,  236,    0,    0,    0,  555,  984,
 -133,    0,    0,  441,  454,  348,  -68,    0,  631,  406,
    0,    0,  450, -138,  -21,    0, -359,    0, 2443,    0,
 2876,    0,    0,    0,    0,    0,    0,  466,  510,    0,
    0,    0,    0,  776,    0, 2170,    0,  518,  -34,  -70,
    0,    0,  721,  250,  247,    0,    0, -246, -212,    0,
};
#define YYTABLESIZE 3123
short yytable[] = {                                      67,
   70,  128,   30,   67,   34,   86,   32,  187,   67,   67,
  109,  112,   33,  129,  463,  124,   86,  365,  232,  380,
  157,  388,   66,  139,  124,  140,   30,   55,   34,   61,
   32,  105,  107,  237,   86,  494,   33,  187,   22,   92,
   23,  295,  303,  134,  237,  135,  367,  368,  130,   31,
  312,  317,  321,  324,   92,  153,   92,  122,  113,  495,
  342,  295,  421,  157,  146,  432,  379,  433,  180,   66,
  161,  421,   66,   31,  181,   67,  352,  353,   67,   76,
  225,   84,   93,  102,  157,  152,   66,   66,  157,   67,
   86,   66,   67,   67,  240,  241,  422,   67,  160,  309,
  139,  310,  140,  124,  301,  422,  103,  413,  123,  328,
  132,  343,  329,  161,  238,   25,  123,  173,  225,  172,
  136,   66,  141,  286,  189,  370,  192,   67,  190,  232,
  232,  234,  219,   86,  191,  507,  123,  235,  289,   25,
  496,  245,   71,  137,   70,   86,  247,  109,  112,  232,
  123,  122,  131,   66,  189,  181,  192,   72,  190,   67,
   67,   70,   67,   86,  191,  181,  182,  136,  136,  322,
  325,  157,   94,  157,  303,  249,  356,  318,  357,  319,
  173,  284,  172,   66,  173,  421,  172,   94,  388,   94,
  232,  103,   87,   53,  187,  171,  358,  359,  434,  435,
   54,   73,  123,  187,  188,   91,  331,   92,  124,  132,
   87,  338,  187,  337,  333,  334,   74,  157,   86,  422,
   86,  296,  136,  289,   53,  285,  152,  131,  123,  219,
  416,   54,  499,  326,  188,  301,  183,  489,  311,  316,
  320,  323,   12,  219,  219,  299,   50,  157,  286,  408,
  409,  225,  286,   18,  327,  104,  104,  104,  171,  104,
  183,  364,  171,  219,  339,   79,  183,   88,   59,   50,
   50,   58,   20,  514,  420,  360,   50,  123,   50,   50,
   50,  183,  521,  420,  483,  183,  483,   20,   78,  171,
   87,  335,   20,  106,  132,  110,  132,  161,   12,   90,
  157,  445,  446,  159,  219,   92,  104,   50,  304,   18,
   86,  189,  173,  192,  172,  190,  423,  187,  340,  341,
  189,  191,  192,  305,  190,  425,  361,  306,  362,  189,
  191,  192,   12,  190,  338,   66,  337,   59,   50,  191,
   58,   67,  307,   18,  350,  416,  351,  483,   20,   20,
  363,   79,   88,  136,  366,  296,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,  219,  219,   78,   87,  299,  286,  346,   53,
  243,  447,  448,   58,  209,  243,   54,  173,   58,  505,
  171,  188,  377,  134,  183,  135,   86,  420,   86,  209,
  188,   59,  173,  289,   58,   59,   50,   88,   58,  188,
   12,  381,  171,  490,  335,  318,  335,  319,  354,  355,
  491,   18,  453,  454,   79,   88,   20,  439,  430,  383,
   87,  388,  110,   90,  189,  155,  192,   92,  190,  486,
  219,  386,  388,  242,  191,  135,  503,   78,   87,  460,
  401,  152,  407,  214,   20,  402,  410,  295,  209,   86,
  207,   90,  210,  211,  428,  212,  123,  105,  440,  105,
  472,  108,  132,  108,  132,   10,   10,  431,   10,   10,
   10,   10,   10,   10,   10,   10,  487,  441,  243,  488,
  243,   58,  281,   58,  467,  461,   10,   10,   10,   10,
   10,   10,  123,  219,  104,  442,  443,  444,  291,  152,
  411,  104,  293,  208,  188,  399,  465,    8,    8,  432,
    8,  433,    8,    8,    8,    8,    8,    8,  466,   10,
  501,   10,   10,  388,   59,  468,   12,   58,  203,    8,
    8,    8,    8,    8,  470,  145,  213,   18,  473,  497,
   98,   98,   20,  508,  151,  243,  388,  502,   58,   90,
  123,  166,   10,   10,  243,  152,  478,   58,  349,  170,
  123,    8,   88,  347,    8,   26,   26,  480,  348,   26,
   26,   26,   26,   26,   16,   26,  481,  482,   98,  485,
  372,  484,  373,  269,  515,   87,   26,   26,   26,   26,
   26,   26,  512,  519,    8,  388,  388,  500,  269,  162,
  269,  279,  509,  244,  510,  135,  123,  243,   38,   38,
   58,  516,   38,   38,   38,   38,   38,  191,   38,  518,
  191,   26,   26,  523,  198,   98,   98,  198,  522,   38,
   38,   38,   20,   38,   38,   47,  225,  187,   47,   90,
  187,   47,  162,  449,  450,  451,  452,  194,  316,  183,
  194,  316,   26,   26,   20,   47,   47,   47,   86,   47,
   47,   90,  225,   44,   38,   38,   44,  290,   44,   44,
   44,  207,  317,  320,   20,  317,  320,  205,  316,  317,
   98,  154,   20,   44,   44,   44,   86,   44,   44,  154,
   47,   47,  429,  197,  273,   38,   38,  273,  493,  198,
  199,  200,  201,  202,  203,  204,  105,  455,  205,  206,
  108,  273,  273,  105,  273,  456,  458,  108,   44,   44,
  457,   47,   47,  459,  308,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,  418,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,  417,  239,   44,
   44,  479,  290,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  288,  462,   92,  427,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,  404,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,   63,
    0,    0,    0,   45,    0,    0,   45,    0,   45,   45,
   45,    0,   46,    0,    0,   46,    0,   46,   46,   46,
    0,   98,    0,   45,   45,   45,    0,   45,   45,    0,
    0,    0,   46,   46,   46,   18,   46,   46,   26,   26,
   26,   26,   26,   26,   26,   26,   12,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   18,   45,   45,
    0,    0,   20,    0,    0,    0,    0,   46,   46,   90,
    0,   48,    0,    0,   48,  283,    0,   48,    0,  287,
    0,   38,   38,   38,   38,   38,   38,   38,   38,   45,
   45,   48,   48,   48,    0,   48,   48,   49,   46,   46,
   49,    0,    0,   49,    0,    0,    0,   47,   47,   47,
   47,   47,   47,   47,   47,  174,    0,   49,   49,   49,
    0,   49,   49,    0,    0,   50,   48,   48,   50,    0,
    0,   50,    0,    0,    0,   44,   44,   44,   44,   44,
   44,   44,   44,    0,    0,   50,   50,   50,   53,   50,
   50,   53,   49,   49,   53,    0,    0,   48,   48,    0,
    0,    0,  283,    0,  287,    0,    0,    0,   53,   53,
   53,   54,   53,   53,   54,    0,    0,   54,  174,    0,
   50,   50,  174,   49,   49,   22,    0,   23,    0,   56,
    0,   54,   54,   54,    0,   54,   54,    0,  292,   51,
    0,  292,   51,   53,   53,   51,   12,    0,  412,  174,
    0,   50,   50,    0,    0,  292,  292,   18,  292,   51,
   51,   51,   20,   51,   51,    0,   54,   54,  114,   90,
    0,  108,  108,  108,   53,   53,    0,    0,  126,   52,
    0,    0,   52,    0,    0,   52,   64,    0,  139,  108,
  140,    0,    0,    0,   51,   51,    0,   54,   54,   52,
   52,   52,    0,   52,   52,   45,   45,   45,   45,   45,
   45,   45,   45,    0,   46,   46,   46,   46,   46,   46,
   46,   46,  108,  175,    0,   51,   51,   55,    0,    0,
   55,  412,    0,   55,   52,   52,   56,    0,   58,   56,
    0,   58,   56,    0,   58,    0,    0,   55,   55,    0,
  174,  126,   55,    0,    0,    0,   56,   56,   58,   58,
    0,   56,    0,   58,   57,   52,   52,   57,    0,    0,
   57,    0,  174,   48,   48,   48,   48,   48,   48,   48,
   48,    0,   55,   55,   57,   57,  175,    0,    0,   57,
  175,   56,   56,   58,   58,    0,    0,    0,    0,   49,
   49,   49,   49,   49,   49,   49,   49,    0,  178,  178,
  178,    0,  178,   55,   55,   59,    0,  175,   59,   57,
   57,   59,   56,   56,   58,   58,  178,  178,    0,   50,
   50,   50,   50,   50,   50,   59,   59,  214,    0,    0,
   59,    0,  209,    0,  207,    0,  210,  211,    0,  212,
   57,   57,   53,   53,   53,   53,   53,   53,   12,  178,
  369,    0,    0,    0,    0,    0,    0,    0,    0,   18,
   59,   59,    0,    0,   20,   54,   54,   54,   54,   54,
   54,  214,  384,    0,    1,    0,  209,    0,  207,    0,
  210,  211,    0,  212,    7,    8,    0,   10,    0,    0,
   12,   59,   59,   51,   51,   51,   51,   51,   51,    0,
    0,   18,    0,    0,   19,    0,    0,    0,  175,    0,
  108,   12,    0,    0,  214,    0,    0,  108,    0,  209,
  213,  207,   18,  210,  211,   68,  212,   20,   68,   60,
  175,    0,   60,   52,   52,   52,   52,   52,   52,    0,
    0,    0,   68,   68,    0,    0,   60,   60,  106,  106,
  106,   60,  106,  292,    0,    0,  292,    0,  297,    0,
  214,  297,    0,  265,  213,  209,    0,  207,    0,  210,
  211,  292,  212,  292,    0,  297,  297,   68,  297,    0,
    0,   60,   60,   55,   55,   55,   55,    0,    0,    0,
    0,    0,   56,   56,   56,   56,   58,   58,    0,  106,
  107,  107,  107,    0,  107,    0,  403,  213,  371,   68,
  135,    0,   60,   60,    0,  178,   64,    0,    0,   64,
   57,   57,   57,   57,    0,  178,  178,    0,  178,    0,
    0,  178,    0,   64,   64,  292,    0,    0,   64,    0,
  297,    0,  178,    0,    0,  178,  136,  178,  136,  286,
    0,  107,  286,  213,  178,  252,    0,    0,  253,  254,
    0,    0,    0,    0,  204,  255,  286,  286,   64,  286,
    0,  256,  257,   59,   59,  258,  259,  197,    0,  260,
  261,    0,  262,  263,  199,  200,  201,  202,  203,  204,
   54,    0,  205,  206,    0,    1,    2,    3,    4,  252,
   64,    5,  253,  254,    6,    7,    8,    9,   10,  255,
   11,   12,   13,   14,   15,  256,  257,   16,   17,  258,
  259,  197,   18,  260,  261,   19,  262,  263,  199,  200,
  201,  202,  203,  204,  264,    0,  205,  206,    1,    2,
    3,    4,  252,    0,    5,  253,  254,    6,    7,    8,
    9,   10,  255,   11,   12,   13,   14,   15,  256,  257,
   16,   17,  258,  259,  197,   18,  260,  261,   19,  262,
  263,  199,  200,  201,  202,  203,  204,  264,    0,  205,
  206,    0,    0,    0,    0,    2,    3,    4,    0,    0,
    5,    0,    0,    6,   60,   60,    9,  106,    0,   11,
   12,   13,   14,   15,  106,    0,   16,   17,    0,    0,
  197,   18,    0,    0,    0,    0,  198,  199,  200,  201,
  202,  203,  204,   21,  236,  205,  206,  279,    0,  236,
  279,  236,    0,  236,  236,    0,  236,    0,    0,    0,
    0,   12,    0,    0,  279,  279,    0,  279,    0,  107,
  236,    0,   18,    0,    0,    0,  107,   20,    0,    0,
  214,    0,    0,  136,   90,  209,    0,  207,    0,  210,
  211,    0,  212,  136,  136,    0,  136,    0,    0,  136,
    0,   64,   64,  109,  109,  109,    0,  109,    0,    0,
  136,    0,    0,  136,    0,  136,  214,    0,    0,    0,
    0,  209,  136,  207,    0,  210,  211,    0,  212,    0,
    0,    0,    0,  214,  236,    0,  236,  236,  209,    0,
  207,    0,  210,  211,    0,  212,  214,    0,    0,    0,
    0,  209,    0,  207,  109,  210,  211,    0,  212,  214,
    0,    0,   61,    0,  209,   61,  207,  436,  210,  211,
    0,  212,  405,  213,    0,    0,  214,    0,    0,   61,
   61,  209,    0,  330,   61,  210,  211,    0,  212,    0,
  214,    0,    0,    0,    0,  209,    0,  332,    0,  210,
  211,    0,  212,    0,    0,    0,    0,    0,  477,  213,
  107,  107,  107,    0,   61,   61,    0,    0,    0,    0,
    0,    0,  214,  374,    0,  506,  213,  209,  107,  207,
    0,  210,  211,    0,  212,    0,  374,    0,   62,  213,
    0,   62,    0,    0,    0,   61,   61,    0,    0,    0,
    0,    0,  213,    0,    0,   62,   62,    0,    0,    0,
   62,  107,  109,  109,  109,    0,  105,  105,  105,  213,
  105,    0,  236,    0,    0,  236,  236,    0,    0,    0,
  109,    0,  236,  213,    0,    0,    0,    0,  236,  236,
   62,   68,  236,  236,  236,    0,  236,  236,    0,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  252,  236,
  236,  253,  254,  109,    0,  213,    0,  105,  255,    0,
    0,   62,   62,    0,  256,  257,    0,    0,  258,  259,
  197,    0,  260,  261,    0,  262,  263,  199,  200,  201,
  202,  203,  204,   54,  252,  205,  206,  253,  254,  309,
  186,  310,  109,    0,  255,    0,    0,    0,    0,  109,
  256,  257,    0,    0,  258,  259,  197,    0,  260,  261,
    0,  262,  263,  199,  200,  201,  202,  203,  204,   54,
    0,  205,  206,  197,    0,    0,    0,    0,    0,  198,
  199,  200,  201,  202,  203,  204,  197,    0,  205,  206,
  123,    0,  198,  199,  200,  201,  202,  203,  204,  197,
    0,  205,  206,    0,    0,  198,  199,  200,  201,  202,
  203,  204,    0,    0,  205,  206,  197,   61,   61,    0,
    0,    0,  198,  199,  200,  201,  202,  203,  204,    0,
  197,  205,  206,  318,  186,  319,  198,  199,  200,  201,
  202,  203,  204,    0,    0,  205,  206,    0,    0,  107,
    0,  108,  108,  108,    0,  108,  107,    0,   63,    0,
    0,   63,  197,    0,   65,    0,    0,   65,  198,  199,
  200,  201,  202,  203,  204,   63,   63,  205,  206,    1,
   63,   65,   65,    0,  123,    0,   65,  375,    0,    7,
    8,    0,   10,   62,   62,   12,    0,    0,    0,    0,
    0,  109,  108,    0,    0,  105,   18,    0,  109,   19,
   63,    0,  105,    0,    0,    0,   65,    0,    0,  309,
    0,  310,    0,   65,   69,    0,    0,   65,    0,   85,
    0,    0,   65,   65,  108,  111,    0,    0,    0,    0,
    0,   63,   63,    0,    0,    0,    0,    0,   65,    0,
    0,    0,    0,  309,    0,  310,    1,    2,    3,    4,
    0,    0,    5,    0,    0,    6,    7,    8,    9,   10,
  123,   11,   12,   13,   14,   15,    0,    0,   16,   17,
  438,    0,    0,   18,    0,    0,   19,    0,   20,    1,
    0,    0,    0,    0,    0,   21,  432,  186,  433,    7,
    8,    0,   10,    0,  123,   12,    0,    0,    0,   48,
    0,    0,  375,   65,   85,    0,   18,    0,    0,   19,
    0,    0,    0,    0,    0,    0,  474,   22,    0,   23,
    0,    0,   62,   48,    0,    0,    0,    0,  475,   80,
    0,   89,   96,  104,    0,    0,    0,  123,    0,    0,
    1,    2,    3,    4,    0,    0,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
  133,    0,   16,   17,   22,    0,   23,   18,    0,    0,
   19,    0,   20,    0,   65,   69,   65,   85,    0,   21,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  108,   62,    0,    0,    0,    0,    0,  108,   22,    0,
   23,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   63,   63,    0,  504,    0,    0,   65,
   65,    0,    0,  375,    0,    0,    1,    2,    3,    4,
    0,    0,    5,    0,    0,    6,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
  139,    0,  140,   18,    0,    0,   19,    0,   20,  133,
    1,    2,    3,    4,    0,   75,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,  139,    0,  140,   18,    0,    0,
   19,    0,   20,    0,    0,    0,    0,    0,    0,   83,
    0,    0,    0,    1,    2,    3,    4,    0,    0,    5,
    0,    0,    6,    7,    8,    9,   10,    0,   11,   12,
   13,   14,   15,    0,    0,   16,   17,  432,    0,  433,
   18,    0,    0,   19,    1,    2,    3,    4,    0,    0,
    5,    0,   21,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,  139,    0,
  140,   18,    0,    0,   19,    0,   20,    0,    0,    0,
    0,    0,    0,   21,    0,    0,  295,    0,  123,    0,
    0,    1,    2,    3,    4,    0,    0,    5,    0,    0,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,  186,    0,    0,   18,    0,
    0,   19,    0,   20,    0,    1,    2,    3,    4,    0,
   75,    5,    0,    0,    6,    7,    8,    9,   10,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
  310,    0,   18,  310,    0,   19,    0,   20,    0,    0,
    0,    0,    0,    0,   83,    0,    0,  310,  310,    0,
  310,    0,    0,    0,    0,    0,    0,    1,    2,    3,
    4,    0,  305,    5,    0,    0,    6,    7,    8,    9,
   10,    0,   11,   12,   13,   14,   15,    0,    0,   16,
   17,    0,    0,    0,   18,    0,    0,   19,    0,   20,
    0,    1,    2,    3,    4,    0,   75,    5,    0,    0,
    6,    7,    8,    9,   10,  186,   11,   12,   13,   14,
   15,    0,  310,   16,   17,    0,    0,    0,   18,    0,
    0,   19,    0,   20,    0,    0,    0,    0,    0,    0,
   83,    0,    0,    0,    0,    2,    3,    4,    0,    0,
    5,    0,    0,    6,  305,    0,    9,    0,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
    0,   18,    0,    0,    0,    0,    2,    3,    4,    0,
    0,    5,    0,   83,    6,    0,    0,    9,    0,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,  157,
  157,  157,   18,  157,    0,    0,    0,   20,    0,    0,
    0,    0,    0,    0,   83,    0,    0,  157,  157,    0,
    0,    1,    2,    3,    4,    0,    0,    5,    0,    0,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,  302,    0,   18,    0,
  157,   19,  406,  185,    0,    0,  310,  310,  310,  310,
   21,    0,  310,    0,    0,  310,  310,  310,  310,  310,
    0,  310,  310,  310,  310,  310,    0,    0,  310,  310,
    0,    0,    0,  310,    0,    0,  310,    0,  305,  305,
  305,  305,    0,    0,  305,  310,    0,  305,  305,  305,
  305,  305,    0,  305,  305,  305,  305,  305,    0,    0,
  305,  305,    0,    0,    0,  305,  419,    0,  305,    0,
    0,    0,    0,    0,    0,    0,    0,  305,    0,    0,
    0,    1,    2,    3,    4,    0,    0,    5,    0,    0,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    2,    3,   16,   17,  469,    5,  471,   18,    0,
    0,   19,    9,    0,    0,    0,   12,   13,   14,   15,
   21,    0,   16,   17,  476,    0,  406,   18,    0,    2,
    3,    4,    0,    0,    5,    0,    0,    6,    0,    0,
    9,    0,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    0,    0,    0,   18,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  157,   21,    0,    0,
    0,    0,    0,    0,    0,    0,  157,  157,    0,  157,
    0,    0,  157,    0,    0,    0,   81,    0,  498,    0,
    0,    0,    0,  157,    0,    0,  157,    0,  157,    2,
    3,    4,    0,  120,    5,  157,    0,    6,    0,    0,
    9,    0,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    0,  511,    0,   18,    0,    0,    0,    0,
  513,  143,    0,    0,  517,  144,    0,   21,  520,  149,
    0,    0,    0,    0,  150,  524,    0,    0,  163,    0,
    0,  165,    1,    2,    3,    4,    0,  167,    5,  169,
    0,    6,    7,    8,    9,   10,    0,   11,   12,   13,
   14,   15,    0,    0,   16,   17,  184,    0,    0,   18,
    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,
    0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
  251,    0,    0,  426,    0,    0,  282,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    2,    3,
    4,  292,    0,    5,    0,  294,    6,    7,    8,    9,
   10,    0,   11,   12,   13,   14,   15,    0,    0,   16,
   17,    0,    0,    0,   18,    0,    0,   19,    0,    2,
    3,    4,    0,    0,    5,    0,   21,    6,    0,    0,
    9,    0,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    1,    2,    3,   18,    0,    0,    5,    0,
    0,    0,    7,    8,    9,   10,    0,   21,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,    0,   18,
    0,    0,   19,
};
short yycheck[] = {                                      26,
   27,  123,    0,   30,    0,   32,    0,  122,   35,   36,
   37,   38,    0,   41,  374,   50,   59,   63,  123,  255,
   91,   44,   26,   40,   59,   42,   24,  123,   24,   23,
   24,   35,   36,   44,   61,   58,   24,  152,   40,   44,
   42,   58,  176,   40,   44,   42,  234,  235,   41,    0,
  189,  190,  191,  192,   59,   90,   61,   40,  123,   44,
   40,   58,  309,  134,  123,   40,  254,   42,  123,   41,
   92,  318,   44,   24,   44,   41,  300,  301,   44,   30,
  123,   32,   33,   34,  155,   40,   58,   59,  159,  116,
  117,   63,   58,   59,  129,  130,  309,   63,   92,   40,
   40,   42,   42,  138,  173,  318,   34,  295,   91,   41,
   61,   91,   44,  135,  125,    0,   91,  113,  123,  113,
   71,   93,   73,  158,  122,  125,  122,   93,  122,  234,
  235,   91,  123,  160,  122,  495,   91,   61,  160,   24,
  125,  135,   44,   71,  171,  172,  140,  174,  175,  254,
   91,   40,   41,  125,  152,  125,  152,   59,  152,  125,
  187,  188,  189,  190,  152,  116,  117,  118,  119,  191,
  192,  242,   44,  244,  308,   61,   60,   40,   62,   42,
  176,   41,  176,  187,  180,  432,  180,   59,   44,   61,
  295,  119,   41,  289,  309,  113,  304,  305,  337,  338,
  296,   44,   91,  318,  122,   40,  197,   42,  243,  160,
   59,  207,  327,  207,  205,  206,   59,  288,  245,  432,
  247,  172,  173,  245,  289,   41,   40,   41,   91,  220,
  299,  296,  468,   41,  152,  304,  121,   93,  189,  190,
  191,  192,  273,  234,  235,  173,    0,  318,  283,  284,
  285,  123,  287,  284,   44,   40,   41,   42,  176,   44,
  145,  307,  180,  254,  290,   30,  151,   32,   22,   23,
   24,   22,  289,  509,  309,   38,   30,   91,   32,   33,
   34,  166,  518,  318,  423,  170,  425,  289,   30,  207,
   32,  207,  289,   35,  245,   37,  247,  319,  273,  296,
  371,  350,  351,   40,  295,   42,   91,   61,   44,  284,
  337,  309,  308,  309,  308,  309,  310,  432,  298,  299,
  318,  309,  318,   59,  318,  319,   94,   44,  124,  327,
  318,  327,  273,  327,  330,  307,  330,   91,   92,  327,
   91,  307,   59,  284,   43,  414,   45,  486,  289,  289,
  306,  116,  117,  304,   93,  306,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  116,  117,  304,  412,  220,  289,
  134,  352,  353,  134,   44,  139,  296,   44,  139,  494,
  308,  309,   59,   40,  279,   42,  423,  432,  425,   59,
  318,  155,   59,  425,  155,  159,  160,  172,  159,  327,
  273,   59,  330,  289,  330,   40,  332,   42,  302,  303,
  296,  284,  358,  359,  189,  190,  289,  343,   41,   58,
  172,   44,  174,  296,  432,   40,  432,   42,  432,  433,
  431,   40,   44,   40,  432,   42,  481,  189,  190,  365,
   59,   40,   41,   33,  289,   58,   41,   58,   38,  486,
   40,  296,   42,   43,  289,   45,   91,   40,   46,   42,
  386,   40,  423,   42,  425,   37,   38,   41,   40,   41,
   42,   43,   44,   45,   46,   47,   41,  297,  242,   44,
  244,  242,  148,  244,   59,   93,   58,   59,   60,   61,
   62,   63,   91,  494,  289,  347,  348,  349,  164,   40,
   41,  296,  168,   93,  432,   61,   40,   37,   38,   40,
   40,   42,   42,   43,   44,   45,   46,   47,   58,   91,
   41,   93,   94,   44,  288,   40,  273,  288,   58,   59,
   60,   61,   62,   63,   59,   80,  126,  284,   40,  465,
   33,   34,  289,   41,   89,  309,   44,  473,  309,  296,
   91,   96,  124,  125,  318,   40,   41,  318,   37,  104,
   91,   91,  337,   42,   94,   37,   38,   41,   47,   41,
   42,   43,   44,   45,   46,   47,   41,   41,   71,  431,
  246,   41,  248,   44,  510,  337,   58,   59,   60,   61,
   62,   63,   41,   41,  124,   44,   44,  288,   59,   92,
   61,  146,   59,   40,   40,   42,   91,  371,   37,   38,
  371,  262,   41,   42,   43,   44,   45,   41,   47,   59,
   44,   93,   94,   41,   41,  118,  119,   44,   59,   58,
   59,   60,  289,   62,   63,   38,  123,   41,   41,  296,
   44,   44,  135,  354,  355,  356,  357,   41,   41,   41,
   44,   44,  124,  125,  289,   58,   59,   60,   59,   62,
   63,  296,  123,   38,   93,   94,   41,  160,   43,   44,
   45,   41,   41,   41,  289,   44,   44,   41,   41,   41,
  173,  296,  289,   58,   59,   60,   41,   62,   63,  296,
   93,   94,  330,  283,   41,  124,  125,   44,  441,  289,
  290,  291,  292,  293,  294,  295,  289,  360,  298,  299,
  289,   58,   59,  296,   61,  361,  363,  296,   93,   94,
  362,  124,  125,  364,  180,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  306,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  304,  128,  124,
  125,  414,  245,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,   40,  369,   42,  327,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  279,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,   24,
   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,   43,   44,
   45,   -1,   38,   -1,   -1,   41,   -1,   43,   44,   45,
   -1,  304,   -1,   58,   59,   60,   -1,   62,   63,   -1,
   -1,   -1,   58,   59,   60,  297,   62,   63,  300,  301,
  302,  303,  304,  305,  306,  307,  273,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  284,   93,   94,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   93,   94,  296,
   -1,   38,   -1,   -1,   41,  155,   -1,   44,   -1,  159,
   -1,  300,  301,  302,  303,  304,  305,  306,  307,  124,
  125,   58,   59,   60,   -1,   62,   63,   38,  124,  125,
   41,   -1,   -1,   44,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,  306,  307,  113,   -1,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   38,   93,   94,   41,   -1,
   -1,   44,   -1,   -1,   -1,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,   58,   59,   60,   38,   62,
   63,   41,   93,   94,   44,   -1,   -1,  124,  125,   -1,
   -1,   -1,  242,   -1,  244,   -1,   -1,   -1,   58,   59,
   60,   38,   62,   63,   41,   -1,   -1,   44,  176,   -1,
   93,   94,  180,  124,  125,   40,   -1,   42,   -1,    6,
   -1,   58,   59,   60,   -1,   62,   63,   -1,   41,   38,
   -1,   44,   41,   93,   94,   44,  273,   -1,  288,  207,
   -1,  124,  125,   -1,   -1,   58,   59,  284,   61,   58,
   59,   60,  289,   62,   63,   -1,   93,   94,   45,  296,
   -1,   40,   41,   42,  124,  125,   -1,   -1,   55,   38,
   -1,   -1,   41,   -1,   -1,   44,   59,   -1,   40,   58,
   42,   -1,   -1,   -1,   93,   94,   -1,  124,  125,   58,
   59,   60,   -1,   62,   63,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,  300,  301,  302,  303,  304,  305,
  306,  307,   91,  113,   -1,  124,  125,   38,   -1,   -1,
   41,  371,   -1,   44,   93,   94,   38,   -1,   38,   41,
   -1,   41,   44,   -1,   44,   -1,   -1,   58,   59,   -1,
  308,  128,   63,   -1,   -1,   -1,   58,   59,   58,   59,
   -1,   63,   -1,   63,   38,  124,  125,   41,   -1,   -1,
   44,   -1,  330,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   93,   94,   58,   59,  176,   -1,   -1,   63,
  180,   93,   94,   93,   94,   -1,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   40,   41,
   42,   -1,   44,  124,  125,   38,   -1,  207,   41,   93,
   94,   44,  124,  125,  124,  125,   58,   59,   -1,  302,
  303,  304,  305,  306,  307,   58,   59,   33,   -1,   -1,
   63,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
  124,  125,  302,  303,  304,  305,  306,  307,  273,   91,
  237,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
   93,   94,   -1,   -1,  289,  302,  303,  304,  305,  306,
  307,   33,  259,   -1,  257,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,  267,  268,   -1,  270,   -1,   -1,
  273,  124,  125,  302,  303,  304,  305,  306,  307,   -1,
   -1,  284,   -1,   -1,  287,   -1,   -1,   -1,  308,   -1,
  289,  273,   -1,   -1,   33,   -1,   -1,  296,   -1,   38,
  126,   40,  284,   42,   43,   41,   45,  289,   44,   41,
  330,   -1,   44,  302,  303,  304,  305,  306,  307,   -1,
   -1,   -1,   58,   59,   -1,   -1,   58,   59,   40,   41,
   42,   63,   44,   41,   -1,   -1,   44,   -1,   41,   -1,
   33,   44,   -1,  125,  126,   38,   -1,   40,   -1,   42,
   43,   59,   45,   61,   -1,   58,   59,   93,   61,   -1,
   -1,   93,   94,  304,  305,  306,  307,   -1,   -1,   -1,
   -1,   -1,  304,  305,  306,  307,  306,  307,   -1,   91,
   40,   41,   42,   -1,   44,   -1,  125,  126,   40,  125,
   42,   -1,  124,  125,   -1,  257,   41,   -1,   -1,   44,
  304,  305,  306,  307,   -1,  267,  268,   -1,  270,   -1,
   -1,  273,   -1,   58,   59,  123,   -1,   -1,   63,   -1,
  123,   -1,  284,   -1,   -1,  287,   40,  289,   42,   41,
   -1,   91,   44,  126,  296,  261,   -1,   -1,  264,  265,
   -1,   -1,   -1,   -1,   58,  271,   58,   59,   93,   61,
   -1,  277,  278,  306,  307,  281,  282,  283,   -1,  285,
  286,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,   -1,  298,  299,   -1,  257,  258,  259,  260,  261,
  125,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,   -1,  298,  299,  257,  258,
  259,  260,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,   -1,  298,
  299,   -1,   -1,   -1,   -1,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  306,  307,  269,  289,   -1,  272,
  273,  274,  275,  276,  296,   -1,  279,  280,   -1,   -1,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,  291,  292,
  293,  294,  295,  296,   33,  298,  299,   41,   -1,   38,
   44,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,  273,   -1,   -1,   58,   59,   -1,   61,   -1,  289,
   59,   -1,  284,   -1,   -1,   -1,  296,  289,   -1,   -1,
   33,   -1,   -1,  257,  296,   38,   -1,   40,   -1,   42,
   43,   -1,   45,  267,  268,   -1,  270,   -1,   -1,  273,
   -1,  306,  307,   40,   41,   42,   -1,   44,   -1,   -1,
  284,   -1,   -1,  287,   -1,  289,   33,   -1,   -1,   -1,
   -1,   38,  296,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,   33,  123,   -1,  125,  126,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   91,   42,   43,   -1,   45,   33,
   -1,   -1,   41,   -1,   38,   44,   40,   41,   42,   43,
   -1,   45,  125,  126,   -1,   -1,   33,   -1,   -1,   58,
   59,   38,   -1,   40,   63,   42,   43,   -1,   45,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,  125,  126,
   40,   41,   42,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   33,  123,   -1,  125,  126,   38,   58,   40,
   -1,   42,   43,   -1,   45,   -1,  123,   -1,   41,  126,
   -1,   44,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,  126,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   91,   40,   41,   42,   -1,   40,   41,   42,  126,
   44,   -1,  261,   -1,   -1,  264,  265,   -1,   -1,   -1,
   58,   -1,  271,  126,   -1,   -1,   -1,   -1,  277,  278,
   93,   59,  281,  282,  283,   -1,  285,  286,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  261,  298,
  299,  264,  265,   91,   -1,  126,   -1,   91,  271,   -1,
   -1,  124,  125,   -1,  277,  278,   -1,   -1,  281,  282,
  283,   -1,  285,  286,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  261,  298,  299,  264,  265,   40,
   41,   42,  289,   -1,  271,   -1,   -1,   -1,   -1,  296,
  277,  278,   -1,   -1,  281,  282,  283,   -1,  285,  286,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
   -1,  298,  299,  283,   -1,   -1,   -1,   -1,   -1,  289,
  290,  291,  292,  293,  294,  295,  283,   -1,  298,  299,
   91,   -1,  289,  290,  291,  292,  293,  294,  295,  283,
   -1,  298,  299,   -1,   -1,  289,  290,  291,  292,  293,
  294,  295,   -1,   -1,  298,  299,  283,  306,  307,   -1,
   -1,   -1,  289,  290,  291,  292,  293,  294,  295,   -1,
  283,  298,  299,   40,   41,   42,  289,  290,  291,  292,
  293,  294,  295,   -1,   -1,  298,  299,   -1,   -1,  289,
   -1,   40,   41,   42,   -1,   44,  296,   -1,   41,   -1,
   -1,   44,  283,   -1,   41,   -1,   -1,   44,  289,  290,
  291,  292,  293,  294,  295,   58,   59,  298,  299,  257,
   63,   58,   59,   -1,   91,   -1,   63,  249,   -1,  267,
  268,   -1,  270,  306,  307,  273,   -1,   -1,   -1,   -1,
   -1,  289,   91,   -1,   -1,  289,  284,   -1,  296,  287,
   93,   -1,  296,   -1,   -1,   -1,   93,   -1,   -1,   40,
   -1,   42,   -1,   26,   27,   -1,   -1,   30,   -1,   32,
   -1,   -1,   35,   36,   37,   38,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   40,   -1,   42,  257,  258,  259,  260,
   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,
   91,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
  342,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  257,
   -1,   -1,   -1,   -1,   -1,  296,   40,   41,   42,  267,
  268,   -1,  270,   -1,   91,  273,   -1,   -1,   -1,    0,
   -1,   -1,  374,  116,  117,   -1,  284,   -1,   -1,  287,
   -1,   -1,   -1,   -1,   -1,   -1,  388,   40,   -1,   42,
   -1,   -1,   23,   24,   -1,   -1,   -1,   -1,  400,   30,
   -1,   32,   33,   34,   -1,   -1,   -1,   91,   -1,   -1,
  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   61,   -1,  279,  280,   40,   -1,   42,  284,   -1,   -1,
  287,   -1,  289,   -1,  187,  188,  189,  190,   -1,  296,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  289,   92,   -1,   -1,   -1,   -1,   -1,  296,   40,   -1,
   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  306,  307,   -1,  488,   -1,   -1,  306,
  307,   -1,   -1,  495,   -1,   -1,  257,  258,  259,  260,
   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   40,   -1,   42,  284,   -1,   -1,  287,   -1,  289,  160,
  257,  258,  259,  260,   -1,  296,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   40,   -1,   42,  284,   -1,   -1,
  287,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,  263,
   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   40,   -1,   42,
  284,   -1,   -1,  287,  257,  258,  259,  260,   -1,   -1,
  263,   -1,  296,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   40,   -1,
   42,  284,   -1,   -1,  287,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   58,   -1,   91,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   41,   -1,   -1,  284,   -1,
   -1,  287,   -1,  289,   -1,  257,  258,  259,  260,   -1,
  296,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   41,   -1,  284,   44,   -1,  287,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   58,   59,   -1,
   61,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,   41,  263,   -1,   -1,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,
   -1,  257,  258,  259,  260,   -1,  296,  263,   -1,   -1,
  266,  267,  268,  269,  270,   41,  272,  273,  274,  275,
  276,   -1,  123,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,  287,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,   -1,   -1,   -1,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  123,   -1,  269,   -1,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,   -1,   -1,  258,  259,  260,   -1,
   -1,  263,   -1,  296,  266,   -1,   -1,  269,   -1,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   40,
   41,   42,  284,   44,   -1,   -1,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   58,   59,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,  125,   -1,  284,   -1,
   91,  287,  280,  289,   -1,   -1,  257,  258,  259,  260,
  296,   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  257,  258,
  259,  260,   -1,   -1,  263,  296,   -1,  266,  267,  268,
  269,  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  125,   -1,  287,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,  258,  259,  279,  280,  383,  263,  385,  284,   -1,
   -1,  287,  269,   -1,   -1,   -1,  273,  274,  275,  276,
  296,   -1,  279,  280,  402,   -1,  404,  284,   -1,  258,
  259,  260,   -1,   -1,  263,   -1,   -1,  266,   -1,   -1,
  269,   -1,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  296,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,   -1,  270,
   -1,   -1,  273,   -1,   -1,   -1,   31,   -1,  466,   -1,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  258,
  259,  260,   -1,   48,  263,  296,   -1,  266,   -1,   -1,
  269,   -1,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,  501,   -1,  284,   -1,   -1,   -1,   -1,
  508,   76,   -1,   -1,  512,   80,   -1,  296,  516,   84,
   -1,   -1,   -1,   -1,   89,  523,   -1,   -1,   93,   -1,
   -1,   96,  257,  258,  259,  260,   -1,  102,  263,  104,
   -1,  266,  267,  268,  269,  270,   -1,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,  121,   -1,   -1,  284,
   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  145,   -1,   -1,  308,   -1,   -1,  151,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  166,   -1,  263,   -1,  170,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  258,
  259,  260,   -1,   -1,  263,   -1,  296,  266,   -1,   -1,
  269,   -1,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,  257,  258,  259,  284,   -1,   -1,  263,   -1,
   -1,   -1,  267,  268,  269,  270,   -1,  296,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,  287,
};
#define YYFINAL 24
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 318
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"AUTO","DOUBLE",
"INT","STRUCT","BREAK","ELSE","LONG","SWITCH","CASE","ENUM","REGISTER",
"TYPEDEF","CHAR","EXTERN","RETURN","UNION","CONST","FLOAT","SHORT","UNSIGNED",
"CONTINUE","FOR","SIGNED","VOID","DEFAULT","GOTO","SIZEOF","VOLATILE","DO","IF",
"STATIC","WHILE","IDENTIFIER","STRINGliteral","FLOATINGconstant",
"INTEGERconstant","CHARACTERconstant","OCTALconstant","HEXconstant",
"TYPEDEFname","ARROW","ICR","DECR","LS","RS","LE","GE","EQ","NE","ANDAND",
"OROR","ELLIPSIS","MULTassign","DIVassign","MODassign","PLUSassign",
"MINUSassign","LSassign","RSassign","ANDassign","ERassign","ORassign",
};
char *yyrule[] = {
"$accept : translation_unit",
"constant : INTEGERconstant",
"constant : FLOATINGconstant",
"constant : OCTALconstant",
"constant : HEXconstant",
"constant : CHARACTERconstant",
"string_literal_list : STRINGliteral",
"string_literal_list : string_literal_list STRINGliteral",
"primary_expression : IDENTIFIER",
"primary_expression : constant",
"primary_expression : string_literal_list",
"primary_expression : '(' comma_expression ')'",
"postfix_expression : primary_expression",
"postfix_expression : postfix_expression '[' comma_expression ']'",
"postfix_expression : postfix_expression '(' ')'",
"postfix_expression : postfix_expression '(' argument_expression_list ')'",
"$$1 :",
"postfix_expression : postfix_expression $$1 '.' member_name",
"$$2 :",
"postfix_expression : postfix_expression $$2 ARROW member_name",
"postfix_expression : postfix_expression ICR",
"postfix_expression : postfix_expression DECR",
"member_name : IDENTIFIER",
"member_name : TYPEDEFname",
"argument_expression_list : assignment_expression",
"argument_expression_list : argument_expression_list ',' assignment_expression",
"unary_expression : postfix_expression",
"unary_expression : ICR unary_expression",
"unary_expression : DECR unary_expression",
"unary_expression : unary_operator cast_expression",
"unary_expression : SIZEOF unary_expression",
"unary_expression : SIZEOF '(' type_name ')'",
"unary_operator : '&'",
"unary_operator : '*'",
"unary_operator : '+'",
"unary_operator : '-'",
"unary_operator : '~'",
"unary_operator : '!'",
"cast_expression : unary_expression",
"cast_expression : '(' type_name ')' cast_expression",
"multiplicative_expression : cast_expression",
"multiplicative_expression : multiplicative_expression '*' cast_expression",
"multiplicative_expression : multiplicative_expression '/' cast_expression",
"multiplicative_expression : multiplicative_expression '%' cast_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression '+' multiplicative_expression",
"additive_expression : additive_expression '-' multiplicative_expression",
"shift_expression : additive_expression",
"shift_expression : shift_expression LS additive_expression",
"shift_expression : shift_expression RS additive_expression",
"relational_expression : shift_expression",
"relational_expression : relational_expression '<' shift_expression",
"relational_expression : relational_expression '>' shift_expression",
"relational_expression : relational_expression LE shift_expression",
"relational_expression : relational_expression GE shift_expression",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQ relational_expression",
"equality_expression : equality_expression NE relational_expression",
"AND_expression : equality_expression",
"AND_expression : AND_expression '&' equality_expression",
"exclusive_OR_expression : AND_expression",
"exclusive_OR_expression : exclusive_OR_expression '^' AND_expression",
"inclusive_OR_expression : exclusive_OR_expression",
"inclusive_OR_expression : inclusive_OR_expression '|' exclusive_OR_expression",
"logical_AND_expression : inclusive_OR_expression",
"logical_AND_expression : logical_AND_expression ANDAND inclusive_OR_expression",
"logical_OR_expression : logical_AND_expression",
"logical_OR_expression : logical_OR_expression OROR logical_AND_expression",
"conditional_expression : logical_OR_expression",
"conditional_expression : logical_OR_expression '?' comma_expression ':' conditional_expression",
"assignment_expression : conditional_expression",
"assignment_expression : unary_expression assignment_operator assignment_expression",
"assignment_operator : '='",
"assignment_operator : MULTassign",
"assignment_operator : DIVassign",
"assignment_operator : MODassign",
"assignment_operator : PLUSassign",
"assignment_operator : MINUSassign",
"assignment_operator : LSassign",
"assignment_operator : RSassign",
"assignment_operator : ANDassign",
"assignment_operator : ERassign",
"assignment_operator : ORassign",
"comma_expression : assignment_expression",
"comma_expression : comma_expression ',' assignment_expression",
"constant_expression : conditional_expression",
"comma_expression_opt :",
"comma_expression_opt : comma_expression",
"declaration : sue_declaration_specifier ';'",
"declaration : sue_type_specifier ';'",
"declaration : declaring_list ';'",
"declaration : default_declaring_list ';'",
"$$3 :",
"default_declaring_list : declaration_qualifier_list identifier_declarator $$3 initializer_opt",
"$$4 :",
"default_declaring_list : type_qualifier_list identifier_declarator $$4 initializer_opt",
"$$5 :",
"default_declaring_list : default_declaring_list ',' identifier_declarator $$5 initializer_opt",
"$$6 :",
"declaring_list : declaration_specifier declarator $$6 initializer_opt",
"$$7 :",
"declaring_list : type_specifier declarator $$7 initializer_opt",
"$$8 :",
"declaring_list : declaring_list ',' declarator $$8 initializer_opt",
"declaration_specifier : basic_declaration_specifier",
"declaration_specifier : sue_declaration_specifier",
"declaration_specifier : typedef_declaration_specifier",
"type_specifier : basic_type_specifier",
"type_specifier : sue_type_specifier",
"type_specifier : typedef_type_specifier",
"declaration_qualifier_list : storage_class",
"declaration_qualifier_list : type_qualifier_list storage_class",
"declaration_qualifier_list : declaration_qualifier_list declaration_qualifier",
"type_qualifier_list : type_qualifier",
"type_qualifier_list : type_qualifier_list type_qualifier",
"declaration_qualifier : storage_class",
"declaration_qualifier : type_qualifier",
"type_qualifier : CONST",
"type_qualifier : VOLATILE",
"basic_declaration_specifier : declaration_qualifier_list basic_type_name",
"basic_declaration_specifier : basic_type_specifier storage_class",
"basic_declaration_specifier : basic_declaration_specifier declaration_qualifier",
"basic_declaration_specifier : basic_declaration_specifier basic_type_name",
"basic_type_specifier : basic_type_name",
"basic_type_specifier : type_qualifier_list basic_type_name",
"basic_type_specifier : basic_type_specifier type_qualifier",
"basic_type_specifier : basic_type_specifier basic_type_name",
"sue_declaration_specifier : declaration_qualifier_list elaborated_type_name",
"sue_declaration_specifier : sue_type_specifier storage_class",
"sue_declaration_specifier : sue_declaration_specifier declaration_qualifier",
"sue_type_specifier : elaborated_type_name",
"sue_type_specifier : type_qualifier_list elaborated_type_name",
"sue_type_specifier : sue_type_specifier type_qualifier",
"typedef_declaration_specifier : typedef_type_specifier storage_class",
"typedef_declaration_specifier : declaration_qualifier_list TYPEDEFname",
"typedef_declaration_specifier : typedef_declaration_specifier declaration_qualifier",
"typedef_type_specifier : TYPEDEFname",
"typedef_type_specifier : type_qualifier_list TYPEDEFname",
"typedef_type_specifier : typedef_type_specifier type_qualifier",
"storage_class : TYPEDEF",
"storage_class : EXTERN",
"storage_class : STATIC",
"storage_class : AUTO",
"storage_class : REGISTER",
"basic_type_name : INT",
"basic_type_name : CHAR",
"basic_type_name : SHORT",
"basic_type_name : LONG",
"basic_type_name : FLOAT",
"basic_type_name : DOUBLE",
"basic_type_name : SIGNED",
"basic_type_name : UNSIGNED",
"basic_type_name : VOID",
"elaborated_type_name : aggregate_name",
"elaborated_type_name : enum_name",
"aggregate_name : aggregate_key '{' member_declaration_list '}'",
"aggregate_name : aggregate_key identifier_or_typedef_name '{' member_declaration_list '}'",
"aggregate_name : aggregate_key identifier_or_typedef_name",
"aggregate_key : STRUCT",
"aggregate_key : UNION",
"member_declaration_list : member_declaration",
"member_declaration_list : member_declaration_list member_declaration",
"member_declaration : member_declaring_list ';'",
"member_declaration : member_default_declaring_list ';'",
"member_default_declaring_list : type_qualifier_list member_identifier_declarator",
"member_default_declaring_list : member_default_declaring_list ',' member_identifier_declarator",
"member_declaring_list : type_specifier member_declarator",
"member_declaring_list : member_declaring_list ',' member_declarator",
"member_declarator : declarator bit_field_size_opt",
"member_declarator : bit_field_size",
"$$9 :",
"member_identifier_declarator : identifier_declarator $$9 bit_field_size_opt",
"member_identifier_declarator : bit_field_size",
"bit_field_size_opt :",
"bit_field_size_opt : bit_field_size",
"bit_field_size : ':' constant_expression",
"enum_name : ENUM '{' enumerator_list '}'",
"enum_name : ENUM identifier_or_typedef_name '{' enumerator_list '}'",
"enum_name : ENUM identifier_or_typedef_name",
"enumerator_list : identifier_or_typedef_name enumerator_value_opt",
"enumerator_list : enumerator_list ',' identifier_or_typedef_name enumerator_value_opt",
"enumerator_value_opt :",
"enumerator_value_opt : '=' constant_expression",
"parameter_type_list : parameter_list",
"parameter_type_list : parameter_list ',' ELLIPSIS",
"parameter_list : parameter_declaration",
"parameter_list : parameter_list ',' parameter_declaration",
"parameter_declaration : declaration_specifier",
"parameter_declaration : declaration_specifier abstract_declarator",
"parameter_declaration : declaration_specifier identifier_declarator",
"parameter_declaration : declaration_specifier parameter_typedef_declarator",
"parameter_declaration : declaration_qualifier_list",
"parameter_declaration : declaration_qualifier_list abstract_declarator",
"parameter_declaration : declaration_qualifier_list identifier_declarator",
"parameter_declaration : type_specifier",
"parameter_declaration : type_specifier abstract_declarator",
"parameter_declaration : type_specifier identifier_declarator",
"parameter_declaration : type_specifier parameter_typedef_declarator",
"parameter_declaration : type_qualifier_list",
"parameter_declaration : type_qualifier_list abstract_declarator",
"parameter_declaration : type_qualifier_list identifier_declarator",
"identifier_list : IDENTIFIER",
"identifier_list : identifier_list ',' IDENTIFIER",
"identifier_or_typedef_name : IDENTIFIER",
"identifier_or_typedef_name : TYPEDEFname",
"type_name : type_specifier",
"type_name : type_specifier abstract_declarator",
"type_name : type_qualifier_list",
"type_name : type_qualifier_list abstract_declarator",
"initializer_opt :",
"initializer_opt : '=' initializer",
"initializer : '{' initializer_list '}'",
"initializer : '{' initializer_list ',' '}'",
"initializer : assignment_expression",
"initializer_list : initializer",
"initializer_list : initializer_list ',' initializer",
"statement : labeled_statement",
"statement : compound_statement",
"statement : expression_statement",
"statement : selection_statement",
"statement : iteration_statement",
"statement : jump_statement",
"labeled_statement : identifier_or_typedef_name ':' statement",
"labeled_statement : CASE constant_expression ':' statement",
"labeled_statement : DEFAULT ':' statement",
"$$10 :",
"compound_statement : $$10 comp_stmt",
"comp_stmt : '{' '}'",
"comp_stmt : '{' declaration_list '}'",
"comp_stmt : '{' statement_list '}'",
"comp_stmt : '{' declaration_list statement_list '}'",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",
"statement_list : statement",
"statement_list : statement_list statement",
"expression_statement : comma_expression_opt ';'",
"selection_statement : IF '(' comma_expression ')' statement",
"selection_statement : IF '(' comma_expression ')' statement ELSE statement",
"$$11 :",
"selection_statement : SWITCH $$11 '(' comma_expression ')' statement",
"$$12 :",
"iteration_statement : WHILE $$12 '(' comma_expression ')' statement",
"$$13 :",
"iteration_statement : DO $$13 statement WHILE '(' comma_expression ')' ';'",
"$$14 :",
"iteration_statement : FOR $$14 '(' comma_expression_opt ';' comma_expression_opt ';' comma_expression_opt ')' statement",
"jump_statement : GOTO identifier_or_typedef_name ';'",
"jump_statement : CONTINUE ';'",
"jump_statement : BREAK ';'",
"jump_statement : RETURN comma_expression_opt ';'",
"translation_unit : external_definition",
"translation_unit : translation_unit external_definition",
"external_definition : function_definition",
"external_definition : declaration",
"function_definition : identifier_declarator compound_statement",
"function_definition : declaration_specifier identifier_declarator compound_statement",
"function_definition : type_specifier identifier_declarator compound_statement",
"function_definition : declaration_qualifier_list identifier_declarator compound_statement",
"function_definition : type_qualifier_list identifier_declarator compound_statement",
"function_definition : old_function_declarator compound_statement",
"function_definition : declaration_specifier old_function_declarator compound_statement",
"function_definition : type_specifier old_function_declarator compound_statement",
"function_definition : declaration_qualifier_list old_function_declarator compound_statement",
"function_definition : type_qualifier_list old_function_declarator compound_statement",
"function_definition : old_function_declarator declaration_list compound_statement",
"function_definition : declaration_specifier old_function_declarator declaration_list compound_statement",
"function_definition : type_specifier old_function_declarator declaration_list compound_statement",
"function_definition : declaration_qualifier_list old_function_declarator declaration_list compound_statement",
"function_definition : type_qualifier_list old_function_declarator declaration_list compound_statement",
"declarator : identifier_declarator",
"declarator : typedef_declarator",
"typedef_declarator : paren_typedef_declarator",
"typedef_declarator : parameter_typedef_declarator",
"parameter_typedef_declarator : TYPEDEFname",
"parameter_typedef_declarator : TYPEDEFname postfixing_abstract_declarator",
"parameter_typedef_declarator : clean_typedef_declarator",
"clean_typedef_declarator : clean_postfix_typedef_declarator",
"clean_typedef_declarator : '*' parameter_typedef_declarator",
"clean_typedef_declarator : '*' type_qualifier_list parameter_typedef_declarator",
"clean_postfix_typedef_declarator : '(' clean_typedef_declarator ')'",
"clean_postfix_typedef_declarator : '(' clean_typedef_declarator ')' postfixing_abstract_declarator",
"paren_typedef_declarator : paren_postfix_typedef_declarator",
"paren_typedef_declarator : '*' '(' simple_paren_typedef_declarator ')'",
"paren_typedef_declarator : '*' type_qualifier_list '(' simple_paren_typedef_declarator ')'",
"paren_typedef_declarator : '*' paren_typedef_declarator",
"paren_typedef_declarator : '*' type_qualifier_list paren_typedef_declarator",
"paren_postfix_typedef_declarator : '(' paren_typedef_declarator ')'",
"paren_postfix_typedef_declarator : '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')'",
"paren_postfix_typedef_declarator : '(' paren_typedef_declarator ')' postfixing_abstract_declarator",
"simple_paren_typedef_declarator : TYPEDEFname",
"simple_paren_typedef_declarator : '(' simple_paren_typedef_declarator ')'",
"identifier_declarator : unary_identifier_declarator",
"identifier_declarator : paren_identifier_declarator",
"unary_identifier_declarator : postfix_identifier_declarator",
"unary_identifier_declarator : '*' identifier_declarator",
"unary_identifier_declarator : '*' type_qualifier_list identifier_declarator",
"postfix_identifier_declarator : paren_identifier_declarator postfixing_abstract_declarator",
"postfix_identifier_declarator : '(' unary_identifier_declarator ')'",
"postfix_identifier_declarator : '(' unary_identifier_declarator ')' postfixing_abstract_declarator",
"paren_identifier_declarator : IDENTIFIER",
"paren_identifier_declarator : '(' paren_identifier_declarator ')'",
"old_function_declarator : postfix_old_function_declarator",
"old_function_declarator : '*' old_function_declarator",
"old_function_declarator : '*' type_qualifier_list old_function_declarator",
"postfix_old_function_declarator : paren_identifier_declarator '(' identifier_list ')'",
"postfix_old_function_declarator : '(' old_function_declarator ')'",
"postfix_old_function_declarator : '(' old_function_declarator ')' postfixing_abstract_declarator",
"abstract_declarator : unary_abstract_declarator",
"abstract_declarator : postfix_abstract_declarator",
"abstract_declarator : postfixing_abstract_declarator",
"postfixing_abstract_declarator : array_abstract_declarator",
"postfixing_abstract_declarator : '(' ')'",
"postfixing_abstract_declarator : '(' parameter_type_list ')'",
"array_abstract_declarator : '[' ']'",
"array_abstract_declarator : '[' constant_expression ']'",
"array_abstract_declarator : array_abstract_declarator '[' constant_expression ']'",
"unary_abstract_declarator : '*'",
"unary_abstract_declarator : '*' type_qualifier_list",
"unary_abstract_declarator : '*' abstract_declarator",
"unary_abstract_declarator : '*' type_qualifier_list abstract_declarator",
"postfix_abstract_declarator : '(' unary_abstract_declarator ')'",
"postfix_abstract_declarator : '(' postfix_abstract_declarator ')'",
"postfix_abstract_declarator : '(' postfixing_abstract_declarator ')'",
"postfix_abstract_declarator : '(' unary_abstract_declarator ')' postfixing_abstract_declarator",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 841 "c5.y"
/* ----end of grammar----*/


yyerror(string)
char*string;
{
    printf("parser error: %s\n", string);
}


main()
{
    yyparse();
}

#line 1432 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 16:
#line 198 "c5.y"
{}
break;
case 18:
#line 199 "c5.y"
{}
break;
case 92:
#line 380 "c5.y"
{}
break;
case 94:
#line 381 "c5.y"
{}
break;
case 96:
#line 382 "c5.y"
{}
break;
case 98:
#line 386 "c5.y"
{}
break;
case 100:
#line 387 "c5.y"
{}
break;
case 102:
#line 388 "c5.y"
{}
break;
case 170:
#line 528 "c5.y"
{}
break;
case 225:
#line 640 "c5.y"
{}
break;
case 238:
#line 666 "c5.y"
{}
break;
case 240:
#line 670 "c5.y"
{}
break;
case 242:
#line 671 "c5.y"
{}
break;
case 244:
#line 672 "c5.y"
{}
break;
#line 1628 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
