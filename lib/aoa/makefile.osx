
CC = cc
# optional COMPFLAGS: -DGETTIMEOFDAY -DBACKTRACE -DBLOCKKERN -DMTSAFE
COMPFLAGS = -O2 -Wall -DGETTIMEOFDAY
INCLUDES = -I../cgt
CFLAGS = $(COMPFLAGS) $(INCLUDES) -DOSX_SOURCE
RUNLOGOBJS_AOA  = runlogc.o
# RUNLOGOBJS_AOA = runlogc.o memalign.o
RUNLOGOBJS = $(RUNLOGOBJS_AOA) memalign.o
GCOBJS = gcbase.o gcms.o gcext.o gclist.o

OBJS = aoa.o
OBJS_I = aoa_i.o
HDRS = gcext.h
FILES = makefile.dos makefile.bsd makefile.sol makefile.mpw \
	makefile.be makefile.fbsd \
	tkhist $(HDRS) aoa.c memtest.cc memt.c memt2.c \
	hist.cc munge.cc runlogc.c memalign.c tables.cc \
	stopwch.h stopwch.cc stopwcha.s example.cc \
	aoa.h gcbase.h gcbase.c gcms.c gcext.c gclist.c gctest.c
LIB = libaoa.a
LIB_I = libaoa_i.a
GCLIB = libaoagc.a
LIBS = ../cgt/libcgt.a -lstdc++
TARGET = /cgt

all:	$(LIB) $(LIB_I) $(GCLIB) $(HDRS) memtest memt memt2 \
	gctest example munge hist \
	runloga runlogbsd runlogi runlogf
#	runloga runlogf runlogi runloggc runloggnu runlogdl
#	runloga runlogbsd runlogf runlogi runloggc \
#	runlogwf runlogwg runloggnu runloggnu+ runlogg++ runlogcsri runlogqf

gctest: gctest.o $(GCLIB) $(LIB)
	$(CC) $(CFLAGS) -o gctest gctest.o $(GCLIB) $(LIB) $(LIBS)
gctest.o: gctest.c gcext.h

example: example.o $(GCLIB) $(LIB)
	$(CC) $(CFLAGS) -o example example.o $(GCLIB) $(LIB) $(LIBS)
example.o: example.cc gcext.h

$(GCLIB): $(GCOBJS)
	rm -f $(GCLIB)
	ar r $(GCLIB) $(GCOBJS)
	if [ -x /usr/bin/ranlib ]; then ranlib $(GCLIB); else ar rs $(GCLIB); fi

gcbase.o: gcbase.c aoa.h gcbase.h
gcms.o: gcms.c aoa.h gcbase.h gcext.h
gcext.o: gcext.c aoa.h gcbase.h gcext.h
gclist.o: gclist.c aoa.h gcbase.h gcext.h

export:	$(LIB) $(LIB_I) $(GCLIB) $(HDRS)
	cp -p -f $(LIB) $(LIB_I) $(GCLIB) $(TARGET)/lib 
	cp -f $(HDRS) $(TARGET)/include

$(LIB):	$(OBJS)
	rm -f $(LIB)
	ar r $(LIB) $(OBJS)
	if [ -x /usr/bin/ranlib ]; then ranlib $(LIB); else ar rs $(LIB); fi

$(LIB_I):	$(OBJS_I)
	rm -f $(LIB_I)
	ar r $(LIB_I) $(OBJS_I)
	if [ -x /usr/bin/ranlib ]; then ranlib $(LIB_I); else ar rs $(LIB_I); fi

log2test:	log2test.o
	$(CC) $(CFLAGS) -o log2test log2test.o $(LIBS)

memtest:	memtest.o $(LIB)
	$(CC) $(CFLAGS) -o memtest memtest.o $(LIB) $(LIBS)

memt:	memt.o $(LIB)
	$(CC) $(CFLAGS) -o memt memt.o $(LIB) $(LIBS)

memt2:	memt2.o $(LIB)
	$(CC) $(CFLAGS) -o memt2 memt2.o $(LIB) $(LIBS)

munge:	munge.o
	$(CC) $(CFLAGS) -o munge munge.o $(LIBS)

hist:	hist.o
	$(CC) $(CFLAGS) -o hist hist.o $(LIBS)

runloga:	$(RUNLOGOBJS_AOA) $(LIB)
	$(CC) $(CFLAGS) -o runloga $(RUNLOGOBJS_AOA) $(LIB) $(LIBS)
#	aout2exe runloga

runlogbsd:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runlogbsd $(RUNLOGOBJS)

runlogf:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runlogf $(RUNLOGOBJS) ../fmalloc/libfmalloc.a $(LIBS)

runlogdl:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runlogdl $(RUNLOGOBJS) -L/usr/local/lib -ldlmalloc

runloggnu:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runloggnu $(RUNLOGOBJS) -lgnumalloc

runloggnu+:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runloggnu+ $(RUNLOGOBJS) -lgnu+malloc

runlogg++:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runlogg++ $(RUNLOGOBJS_AOA) -lg++malloc

runlogcsri:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runlogcsri $(RUNLOGOBJS) -lcsrimalloc

runlogqf:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runlogqf $(RUNLOGOBJS_AOA) -lqfmalloc

runloggc:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runloggc $(RUNLOGOBJS) -lgc

runlogi:	$(RUNLOGOBJS_AOA) aoa_i.o
	$(CC) $(CFLAGS) -o runlogi $(RUNLOGOBJS_AOA) aoa_i.o $(LIBS)

runlogwf:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runlogwf $(RUNLOGOBJS) ../wfmalloc/libwfmalloc.a ../cgt/libcgt.a

runlogwg:	$(RUNLOGOBJS)
	$(CC) $(CFLAGS) -o runlogwg $(RUNLOGOBJS) ../wgmalloc/libwgmalloc.a ../cgt/libcgt.a

aoa_i.o:	aoa.c
	$(CC) $(CFLAGS) -DINSTRUMENT -c -o aoa_i.o aoa.c

aoa.o:	aoa.c aoa.h
aoa_i.o:	aoa.c aoa.h
memtest.o:	memtest.cc
memt.o:	memt.c
memt2.o:	memt2.c

clean:
	rm -f *.o *.a aoa_i.c test memt memt2 memtest gctest \
	runlog? hist munge tags

.SUFFIXES:	.c .cc .o

.c.o:
	$(CC) -c $(CFLAGS) $<

.cc.o:
	$(CC) -c $(CFLAGS) $<

tar:
	tar -zcf aoa.tgz $(FILES)

tarall:
	tar -zcf aoa.tgz $(FILES) RCS

files:
	@echo $(FILES)

difflist:
	@for f in $(FILES); do rcsdiff -q $$f >/dev/null || echo $$f; done
